// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract collageFinder {
    uint256 public marks = 30;
    address public owner;

    event marksChanged(uint256 currentMarks);

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function checkforIIT(uint256 currentMarks) external onlyOwner {
        require(currentMarks > 90, "You are not eligible for this.");

        marks = currentMarks;
        emit marksChanged(currentMarks);
    }

    function checkforNIT(uint256 currentMarks) external onlyOwner {
        require(currentMarks > 80, "You are not eligible for this.");

        marks = currentMarks;
        emit marksChanged(currentMarks);
    }

    function checkforPVT(uint256 currentMarks) external onlyOwner {
        require(currentMarks > 60, "You are not eligible for this.");

        marks = currentMarks;
        emit marksChanged(currentMarks);
    }

    function checkMinimumPassingMarks() external view {
        assert(marks >= 33);
    }

    function checkforAny(uint256 currentMarks) external onlyOwner {
        if (currentMarks <= 45) {
            revert("you are not having minimul marks for any collage.");
        }
        marks = currentMarks;
        emit marksChanged(currentMarks);
    }
}
